r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# plot diversity ~ P
colorder <- c( "grey48", "firebrick 3")
dat$P <- as.factor(dat$P)
b <- ggplot(dat, aes(factor(P), diversity, fill = P)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
scale_fill_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
labs(y = expression(Species ~ diversity),
x = "P level") +
scale_x_discrete(labels = c("Ambient P","P fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot diversity ~ ai:p
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
AI_P <- AI + (intervals(bestmod)$fixed["P:AI", "upper"] - intervals(bestmod)$fixed["P:AI", "est."])
pdat$upAI <- (pdat$fit + AI)
pdat$lwAI <- (pdat$fit - AI)
pdat$upAI_P <- (pdat$fit + AI_P)
pdat$lwAI_P <- (pdat$fit - AI_P)
p0 <- lm(fit ~ AI, data = pdat[which(pdat$P == 0), ])
pdat$p0 <- predict(p0, level = 0, newdata = pdat)
p0u <- lm(upAI ~ AI, data = pdat[which(pdat$P == 0), ])
pdat$upAI <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwAI ~ AI, data = pdat[which(pdat$P == 0), ])
pdat$lwAI <- predict(p0l, level = 0, newdata = pdat)
p1 <- lm(fit ~ AI, data = pdat[which(pdat$P == 1), ])
pdat$p1 <- predict(p1, level = 0, newdata = pdat)
p1u <- lm(upAI_P ~ AI, data = pdat[which(pdat$P == 1), ])
pdat$upAI_P <- predict(p1u, level = 0, newdata = pdat)
p1l <- lm(lwAI_P ~ AI, data = pdat[which(pdat$P == 1), ])
pdat$lwAI_P <- predict(p1l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = AI, y = diversity, colour = factor(P)),
size = 2,
alpha = 0.2) +
geom_ribbon(data = pdat,
aes(x = AI, ymin = pdat$lwAI_P, ymax = pdat$upAI_P),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "firebrick 3") +
geom_ribbon(data = pdat,
aes(x = AI, ymin = pdat$lwAI, ymax = pdat$upAI),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "grey45") +
geom_line(data = fortify(p0), aes(x = AI, y = .fitted),
colour = "grey38",
size = 1) +
geom_line(data = fortify(p1), aes(x = AI, y = .fitted),
colour = "firebrick 3",
size = 1) +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ diversity), x = "Aridity index")
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# set response variable
rv <- "evenness_sq"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# plot evenness ~ AI
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
pdat$upAI <- sqrt(pdat$fit + AI)
pdat$lwAI <- sqrt(pdat$fit - AI)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ AI, data = pdat)
p0u <- lm(upAI ~ AI, data = pdat)
pdat$upAI <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwAI ~ AI, data = pdat)
pdat$lwAI <- predict(p0l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = AI, y = evenness),
colour = "grey48",
size = 2,
alpha = 0.2) +
geom_ribbon(data = pdat,
aes(x = AI, ymin = pdat$lwAI, ymax = pdat$upAI),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "chocolate4") +
geom_line(data = fortify(p0), aes(x = AI, y = .fitted),
colour = "chocolate4",
size = 1) +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ evenness), x = "Aridity index")
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ ndep
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
N_Dep <- (intervals(bestmod)$fixed["N_Dep", "upper"] - intervals(bestmod)$fixed["N_Dep", "est."])
pdat$upN_Dep <- sqrt(pdat$fit + N_Dep)
pdat$lwN_Dep <- sqrt(pdat$fit - N_Dep)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ N_Dep, data = pdat)
p0u <- lm(upN_Dep ~ N_Dep, data = pdat)
pdat$upN_Dep <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwN_Dep ~ N_Dep, data = pdat)
pdat$lwN_Dep <- predict(p0l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = N_Dep, y = evenness),
colour = "grey48",
size = 2,
alpha = 0.2) +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep, ymax = pdat$upN_Dep),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "royalblue4") +
geom_line(data = fortify(p0), aes(x = N_Dep, y = .fitted),
colour = "royalblue4",
size = 1) +
labs(y = expression(Species ~ evenness), x = expression(Nitrogen ~ deposition ~ kg ~ ha^{-1}))
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ p
colorder <- c( "grey48", "firebrick 3")
dat$P <- as.factor(dat$P)
b <- ggplot(dat, aes(factor(P), evenness, fill = P)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
scale_fill_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
labs(y = expression(Species ~ evenness),
x = "P level") +
scale_x_discrete(labels = c("Ambient P","P fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.15),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot evenness ~ n:ndep
pdat <- dat
pdat$fit <- predict(bestmod, level = 0, newdata = pdat)
N_Dep <- (intervals(bestmod)$fixed["N_Dep", "upper"] - intervals(bestmod)$fixed["N_Dep", "est."])
N_Dep_N <- N_Dep + (intervals(bestmod)$fixed["N_Dep:N", "upper"] - intervals(bestmod)$fixed["N_Dep:N", "est."])
pdat$upN_Dep <- sqrt(pdat$fit + N_Dep)
pdat$lwN_Dep <- sqrt(pdat$fit - N_Dep)
pdat$upN_Dep_N <- sqrt(pdat$fit + N_Dep_N)
pdat$lwN_Dep_N <- sqrt(pdat$fit - N_Dep_N)
pdat$fit <- sqrt(pdat$fit)
p0 <- lm(fit ~ N_Dep, data = pdat[which(pdat$N == 0), ])
p0u <- lm(upN_Dep ~ N_Dep, data = pdat[which(pdat$N == 0), ])
pdat$upN_Dep <- predict(p0u, level = 0, newdata = pdat)
p0l <- lm(lwN_Dep ~ N_Dep, data = pdat[which(pdat$N == 0), ])
pdat$lwN_Dep <- predict(p0l, level = 0, newdata = pdat)
p1 <- lm(fit ~ N_Dep, data = pdat[which(pdat$N == 1), ])
p1u <- lm(upN_Dep_N ~ N_Dep, data = pdat[which(pdat$N == 1), ])
pdat$upN_Dep_N <- predict(p1u, level = 0, newdata = pdat)
p1l <- lm(lwN_Dep_N ~ N_Dep, data = pdat[which(pdat$N == 1), ])
pdat$lwN_Dep_N <- predict(p1l, level = 0, newdata = pdat)
s <- ggplot() +
geom_point(data = dat,
aes(x = N_Dep, y = evenness, colour = factor(N)),
size = 2,
alpha = 0.3) +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep_N, ymax = pdat$upN_Dep_N),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "royalblue3") +
geom_ribbon(data = pdat,
aes(x = N_Dep, ymin = pdat$lwN_Dep, ymax = pdat$upN_Dep),
alpha = 0.15,
linetype = 2,
colour = NA,
size = 0.1,
fill = "grey45") +
geom_line(data = fortify(p0), aes(x = N_Dep, y = .fitted),
colour = "grey38",
size = 1) +
geom_line(data = fortify(p1), aes(x = N_Dep, y = .fitted),
colour = "royalblue3",
size = 1) +
scale_color_manual(values = c("grey38", "royalblue3"),
labels= c("Ambient N","N fertilized"),
name="N level") +
labs(y = expression(Species ~ evenness),
x = expression(Nitrogen ~ deposition ~ kg ~ ha^{-1}))
s + theme_few() + theme(legend.position = c(0.9, 0.15),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# load data and initialize data frame
spec <- read.csv("stcovercommatrix.csv", header = TRUE, row.names = 1)
sites <- c("Bunchgrass", "Cedar Creek", "Cedar Point", "Konza",
"Lookout", "Sevilleta", "Shortgrass", "Temple", "Trelease")
scoressep <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
scorestog <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
# create nmds and permanova models testing treatments for each site individually
for (i in 1:length(sites)) {
subspec <- spec[grep(paste("^", sites[i], sep = ""), row.names(spec)), ]
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
scoressep <- rbind(scoressep, s)
sitedat <- alldata[grep(paste("^", sites[i], sep = ""), alldata$site_name), ]
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$uniqblk)
permod
mfilnam <- paste(outpath, sites[i], "_spp_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
}
colnames(scoressep) <- c("ssnmds1", "ssnmds2", "ssstress")
scoressep$uniqsubplot <- rownames(scoressep)
# create an nmds and permanova model to test treatments across all sites
subspec <- spec
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
scorestog <- rbind(scorestog, s)
sitedat <- alldata
sitedat$trt <- as.factor(sitedat$trt)
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$site_name)
permod
mfilnam <- paste(outpath, "allsites", "_spp_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
colnames(scorestog) <- c("stnmds1", "stnmds2", "ststress")
scorestog$uniqsubplot <- rownames(scorestog)
# merge nmds scores with data
alldata <- merge(alldata, scorestog, by = "uniqsubplot")
alldata <- merge(alldata, scoressep, by = "uniqsubplot")
# load data and initialize data frame
spec <- read.csv("traitcommatrix.csv", header = TRUE, row.names = 1)
sites <- c("Bunchgrass", "Cedar Creek", "Cedar Point", "Konza",
"Sevilleta", "Shortgrass", "Temple", "Trelease", "Lookout")
tscoressep <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
tscorestog <- data.frame(
"nmds1" = as.numeric(),
"nmds2" = as.numeric(),
"stress" = as.numeric()
)
# create nmds and permanova models testing treatments for each site individually
for (i in 1:length(sites)) {
subspec <- spec[grep(paste("^", sites[i], sep = ""), row.names(spec)), ]
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
tscoressep <- rbind(tscoressep, s)
sitedat <- alldata[grep(paste("^", sites[i], sep = ""), alldata$site_name), ]
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$uniqblk)
permod
mfilnam <- paste(outpath, sites[i], "_trait_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
}
colnames(tscoressep) <- c("tsnmds1", "tsnmds2", "tsstress")
tscoressep$uniqsubplot <- rownames(tscoressep)
# create an nmds and permanova model to test treatments across all sites
subspec <- spec
bray.subspec = vegdist(subspec, method = "bray")
nmds.subspec <- metaMDS(bray.subspec)
s <- cbind(as.data.frame(scores(nmds.subspec)), nmds.subspec$stress)
tscorestog <- rbind(tscorestog, s)
sitedat <- alldata
sitedat$trt <- as.factor(sitedat$trt)
permod <- adonis(bray.subspec ~
N +
P +
N * P,
data = sitedat, permutations = 999,
strata = sitedat$site_name)
permod
mfilnam <- paste(outpath, "allsites", "_trait_permodtable.csv", sep = "")
write.csv(permod$aov.tab, mfilnam)
colnames(tscorestog) <- c("ttnmds1", "ttnmds2", "ttstress")
tscorestog$uniqsubplot <- rownames(tscorestog)
# merge nmds scores with data
alldata <- merge(alldata, tscorestog, by = "uniqsubplot")
alldata <- merge(alldata, tscoressep, by = "uniqsubplot")
# plot trait differences in analyzed sites together
np1 <- alldata
NMDS = data.frame(NMDS1 = np1$ttnmds1, NMDS2 = np1$ttnmds2, group = np1$N, site = np1$site_name)
for(i in 1:length(NMDS[, 1])){
if(NMDS$group[i] == 1) {
NMDS$group[i] <- "N"
} else {
NMDS$group[i] <- "C"
}
}
NMDS$group <- as.factor(NMDS$group)
df.trt <- data.frame()
for (g in levels(NMDS$group)){
df.trt <- rbind(df.trt,
cbind(as.data.frame(with(NMDS[NMDS$group == g, ],
veganCovEllipse(cov.wt(cbind(NMDS1, NMDS2), wt = rep(1 / length(NMDS1),
length(NMDS1)))$cov, center = c(mean(NMDS1), mean(NMDS2))))), group = g))
}
ell.c <- subset(df.trt, group == "C")
ell.n <- subset(df.trt, group == "N")
limx <- c(-0.2, 0.2)
limy <- c(-0.2, 0.2)
par(pin=c(2.5,2.5))
{
plot(ttnmds2 ~ ttnmds1, data = subset(np1, np1$trt == c("Control", "P")),
pch = 21, col = alpha('grey48', 0.5), bg = alpha('grey48', 0.5),
ylim = limy, xlim = limx, ylab = "NMDS 2", xlab = "NMDS 1")
points(ttnmds2 ~ ttnmds1, data = subset(np1, np1$trt == c("N", "NP")),
pch = 22, col = alpha('royalblue4', 0.5), bg = alpha('royalblue4', 0.5),
ylim = limy, xlim = limx, ylab = "", xlab = "")
polygon(ell.c$NMDS1, ell.c$NMDS2, lty=2, lwd = 2, border = 'grey48', col = alpha('grey48', 0.2),
ylim = limy, xlim = limx, ylab = "", xlab = "")
polygon(ell.n$NMDS1, ell.n$NMDS2, lty=2, lwd = 2, border = 'royalblue4', col = alpha('royalblue4', 0.2),
ylim = limy, xlim = limx, ylab = "", xlab = "")
legend("bottomright", c('Contol', 'N fertilized'),
lty = 2, lwd = 1, col = c("grey48", 'royalblue4'),
pch = c(21, 22), pt.bg = alpha(c("grey48", 'royalblue4'), 0.3),
box.lwd = 1, bg = NA, pt.cex = 1, cex = 0.75)
mtext('Plant Trait Composition', line=1, cex=1.2)
}
# plot ttnmds ~ N
colorder <- c( "grey48", "royalblue3")
dat <- alldata
dat$N <- as.factor(dat$N)
b <- ggplot(dat, aes(factor(N), ttnmds1, fill = N)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "royalblue3"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
scale_fill_manual(values = c( "grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
labs(y = expression(NMDS ~ 1),
x = "N level") +
scale_x_discrete(labels = c("Ambient N","N fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
library(dplyr)
NMDS %>%
group_by(group, site) %>%
summarise_at(vars("NMDS1", "NMDS2"), mean) -> snmds
snmds %>%
group_by(group) %>%
summarise_at(vars("NMDS1"), mean) -> mnmds
mnmds
setwd("~/Documents/GitHub/retailspending")
library(shiny)
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
as.Date("1992", "%Y")
as.Date("1992", "%Y")
as.Date("2020", "%Y")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
paste(input$y[1], "01-01", sep = "")
paste(2000", "01-01", sep = "")
paste("2000", "01-01", sep = "")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
install.packages("shinythemes")
install.packages("shinythemes")
install.packages("shinythemes")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
runApp("Shinymrt")
dat <- read.csv("spending.csv", header = TRUE)[-c(343:348), ]
View(dat)
runApp("Shinymrt")
View(dat)
View(dat)
dat <- read.csv("spending.csv", header = TRUE)
runApp("Shinymrt")
View(dat)
?subset
subset(dat, Date >= "2020-02-01" & Date ,<= "2020-07-01")
subset(dat, Date >= "2020-02-01" && Date ,<= "2020-07-01")
subset(dat, Date >= "2020-02-01" & Date <= "2020-07-01")
rbind(
s20 <- subset(dat, Date >= "2020-02-01" & Date <= "2020-07-01"),
s19 <- subset(dat, Date >= "2019-02-01" & Date <= "2019-07-01"),
s18 <- subset(dat, Date >= "2018-02-01" & Date <= "2018-07-01"),
s17 <- subset(dat, Date >= "2017-02-01" & Date <= "2017-07-01")
)
s20 <- subset(dat, Date >= "2020-02-01" & Date <= "2020-07-01")
View(s20)
subset(dat, Date >= "2020-02-01" & Date <= "2020-07-01")
rbind(
s20 <- subset(dat, Date >= 2020-02-01 & Date <= 2020-07-01),
s19 <- subset(dat, Date >= "2019-02-01" & Date <= "2019-07-01"),
s18 <- subset(dat, Date >= "2018-02-01" & Date <= "2018-07-01"),
s17 <- subset(dat, Date >= "2017-02-01" & Date <= "2017-07-01")
)
s20 <- subset(dat, Date >= as.Date("2020-02-01") & Date <= as.Date("2020-07-01"))
s20 <- subset(dat, Date >= as.Date("2020-02-01", "%Y-%m-%d") & Date <= as.Date("2020-07-01", "%Y-%m-%d"))
View(dat)
dat$Date <- as.Date(dat$Date, "%Y-%m-%d")
s20 <- subset(dat, Date >= "2020-01-01" & Date <= "2020-07-01")
View(s20)
s20 <- subset(dat, Date >= "2020-01-01" & Date <= "2020-06-20")
View(s20)
View(s20)
rbind(
s20 <- subset(dat, Date > "2020-02-01" & Date < "2020-07-01"),
s19 <- subset(dat, Date > "2019-02-01" & Date < "2019-07-01"),
s18 <- subset(dat, Date > "2018-02-01" & Date < "2018-07-01"),
s17 <- subset(dat, Date > "2017-02-01" & Date < "2017-07-01")
)
View(s17)
